There is an array A with N integers, value[i]. Each element in the array A is assigned a key, key[i], which can range from 1 to N. Each element has distinct key, i.e., keys are permutation of integers 1 to N. The array A is first sorted in increasing order as per the keys (You'll have to perform this task).

After that, the array A now has to be sorted in non-decreasing order as per its values. The sorting is performed in such a way that on each iteration, the element with highest value in unsorted sub-array is put at its correct location in sorted array. In doing so, for each element, we store the count of number of keys the element passes through on going from left to right (to its correct position in sorted array).

Your task is to find the sum of all the counts in sorting the array (as per values).

Note: The sorting is stable, i.e., two objects with equal values appear in the same order in sorted output as they appear in the input unsorted array.

Input Format

First line: The size of array, N.

Next line: space-separated integers denoting the value of elements in array A, value[i].

Next line: space-separated integers denoting the key of elements in array A, key[i].

Note: keys are a permutation of integers 1 to N integers.

Constraints

2<=N<=10000

1<=value[i]<=10000000

1<=key[i]<=N

Output Format

Print a single integer denoting the sum of counts of number of keys the element passes through on going left to right (to its correct position) while sorting on values.

Sample Input 0

5
1 2 6 4 3
3 5 1 2 4
Sample Output 0

8
Explanation 0

First the array is sorted in increasing order as per keys.

Values= [6, 4, 1, 3, 2]

Keys = [1, 2, 3, 4, 5]

After this, on sorting as per values, key at index 0 passes keys at index 1, 2, 3, 4, key at index 1 passes key at index 2, 3, 4 and key at index 3 passes key at index 4.

The final ordering of array is:

Values= [1, 2, 3, 4, 6]

Keys = [3, 5, 4, 2, 1]

Therefore, the total count= 4 + 3 + 1 = 8.